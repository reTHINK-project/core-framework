
@startuml "register-hyperty.png"

autonumber

!define SHOW_RuntimeA

!define SHOW_AppAtRuntimeA

!define SHOW_CoreRuntimeA
!define SHOW_MsgBUSAtRuntimeA
!define SHOW_RegistryAtRuntimeA
!define SHOW_IdentitiesAtRuntimeA
!define SHOW_CoreAgentAtRuntimeA

!define SHOW_SP1SandboxAtRuntimeA
!define SHOW_Protostub1AtRuntimeA
!define SHOW_ServiceProvider1HypertyAtRuntimeA

!define SHOW_SP1

!include ../runtime_objects.plantuml

RunUA@A -> RunReg@A : registerHyperty(\npostMessage,\nHypertyDescriptor )

	group associate to Identity : to be designed in a separate diagram by Id Management Group

		RunID@A <- RunReg@A : get Identity

		... ...

		RunReg@A <- RunReg@A : set Identity

	end group

	group allocate address for new Hyperty Instance
		RunReg@A <- RunReg@A : resolve protoStub URL
		RunReg@A -> BUS@A : postMessage(\nRead Msg\nto get hyperty \nAddress Allocation)

		BUS@A -> Proto1@A : postMessage(\nRead Msg\nto get hyperty \nAddress Allocation)

		Proto1@A -> SP1 : read hyperty\nAddress Allocation\nSP1 MSG Protocol

		group option: connect Protocol Stub to the domain in case it is still not connected yet

		...

		end group

		Proto1@A <- SP1 : read response \nmessage with\n hyperty Address\n SP1 MSG Protocol

		Proto1@A -> BUS@A : postMessage(\nread response \nmessage with\n hyperty Address\n MSG)

		RunReg@A <- BUS@A : postMessage(\nread response \nmessage with\n hyperty Address\n MSG)

	end group
		
	group register Hyperty at SP1 Registry
		RunReg@A <- RunReg@A : collect Hyperty\nruntime Context data
		RunReg@A <- RunReg@A : resolve \nprotoStub URL
		RunReg@A -> BUS@A : postMessage(\nCreate \nhypertyRegistration\n MSG)

		BUS@A -> Proto1@A : postMessage(\ncreate \nhypertyRegistration\n MSG)

		Proto1@A -> SP1 : create\nhypertyRegistration\nSP1 MSG Protocol


	end group

RunReg@A -> BUS@A : addListener(\n registryListener,\n hypertyURL\status)

RunUA@A <- RunReg@A : hypertyURL

@enduml
