
@startuml "deploy-hyperty.png"

autonumber

!define SHOW_RuntimeA

!define SHOW_AppAtRuntimeA

!define SHOW_CoreRuntimeA
!define SHOW_MsgBUSAtRuntimeA
!define SHOW_RegistryAtRuntimeA
!define SHOW_CoreAgentAtRuntimeA
!define SHOW_AuthAtRuntimeA

!define SHOW_SP1SandboxAtRuntimeA
!define SHOW_Protostub1AtRuntimeA
!define SHOW_ServiceProvider1HypertyAtRuntimeA
!define SHOW_ServiceProvider1SandboxManagerAtRuntimeA

!define SHOW_SP1
!define SHOW_Cat1

!include ../runtime_objects.plantuml


RunUA@A <- App@A : loadHyperty\n(HypertyDescriptorURL)

== get Hyperty descriptor ==

	RunUA@A -> Cat1 : get\nHypertyDescriptorURL

	RunUA@A <-- Cat1 : return HypertyDescriptor

== get Hyperty source code ==

	RunUA@A -> SP1 : get\nHypertySouceCodeURL

	RunUA@A <-- SP1 : return Hyperty.js


group register Hyperty (designed at register-hyperty.md)

RunUA@A -> RunReg@A : registerHyperty(\npostMessage,\nHypertyDescriptor )

...

RunUA@A <- RunReg@A : hypertyURL

end group


RunUA@A -> RunAuth@A : addPolicies( hypertyURL, policies )

RunUA@A -> RunUA@A : HypertyDescriptor.policies?

alt deploy policy enforcer (see separated diagram)

...

end


BUS@A <- RunUA@A : addListener(\n hypertyListener, \nhypertyURL)

RunUA@A -> RunAuth@A : sandboxing(HypertyDescriptorURL) ?

note right
	Ask Policy Engine about sandboxing Policy
end note

RunUA@A <-- RunAuth@A : sandboxing Policy returned

alt App and Hyperty executes in the same sandbox

RunUA@A --> App@A : return HypertyRegistration\n( Hyperty.js\n+HypertyURL+\nHypertyConfiguration\n + msgbus)

create SP1H@A
App@A -> SP1H@A : new(HypertyURL, HypertyConfiguration, msgbus)

note right
	 In this case, it is the App
		that instantiates the Hyperty,
		 since the RuntimeUA is not able to do it
end note

else App and Hyperty are executed in different sandboxes

RunUA@A -> RunReg@A : getHypertySandbox\n(HypertyDomain)

note right
	If there is already a sandbox for the Hyperty domain
	the Hyperty is instantiated there.
	Otherwise a new sandbox has to be created.
	Sandbox management procedures are not shown here
	since it will depend on the runtime type.
end note

alt sandbox does not existing

== Instantiate Sandbox ==

	create Sand1@A
	RunUA@A -> Sand1@A : new( msgBus )

	RunUA@A <-- Sand1@A : return sandboxInstance

	RunUA@A -> RunReg@A : registerSandbox\n( sandboxInstance, domainURL )

	RunUA@A <-- RunReg@A : return RuntimeSandboxURL

end

== Instantiate Hyperty inside the Sandbox ==

RunUA@A -> Sand1@A : deployComponent( hyperty.js, RuntimeHypertybURL,configuration )

create SP1H@A

Sand1@A -> SP1H@A : new

RunUA@A <-- Sand1@A : return component is deployed

RunUA@A --> App@A : return Hyperty instance API stub

end

@enduml
