

@startuml "syncher-create.png"

autonumber

!define SHOW_SP1

!define SHOW_RuntimeA

!define SHOW_CoreRuntimeA
!define SHOW_SMAtRuntimeA
!define SHOW_MsgBUSAtRuntimeA
!define SHOW_RegistryAtRuntimeA
!define SHOW_AuthAtRuntimeA
!define SHOW_SP1SandboxAtRuntimeA
!define SHOW_ServiceProvider1HypertyAtRuntimeA
!define SHOW_LocalObjectAtRuntimeA
!define SHOW_Syncher1AtRuntimeA

!include ../runtime_objects.plantuml

SP1H@A -> Sync1@A : create( schema )

create LocObj@A

Sync1@A ->  LocObj@A : new

Sync1@A -> BUS@A : postMsg(Create MSG)

RunSM@A <- BUS@A : postMsg(Create MSG)

RunAuth@A <- RunSM@A : authoriseObjCreation( hypertyOwner, obj )

RunAuth@A -> RunAuth@A : apply authz Policies

RunAuth@A -> RunSM@A : Object Creation Authorised

opt Policies for Data Object creation enforce its registration

	RunSM@A -> RunReg@A : registerDataObject(\n hyperty, readers , descriptor,\n addressAllocationRequired,\nBackendRegistryRequired)

	opt addressAllocationRequired = TRUE
		RunReg@A -> SP1 : allocate address

		note over BUS@A
			Similar to Hyperty registration
		end note
		...

		RunSM@A <- RunReg@A : return new\n DataObjectURL

		RunSM@A -> BUS@A : postMsg(\nResponse Msg )

		SP1H@A <- BUS@A : postMsg(\nResponse Msg )

		note right
			Hyperty owner is informed
			 about new DataObject URL
		end note


	end

	opt BackendRegistryRequired = TRUE. Similar to Hyperty registration

		RunReg@A -> SP1 : register data object
		note over BUS@A
			Similar to Hyperty registration
		end note
		...
	end

	RunReg@A -> BUS@A : addListener(\nDataObjectURL\status )

	note right
		Registry requests to receive events about\n
		 the status of the new data object
	end note


end

RunSM@A -> BUS@A : addListener( SMListener, <ObjectURL>/subscription )

note right
	Reporter SM set its listener to receive Object subscription requests from Observers
end note

opt Hyperty owner / reporter is set as listener of DataObjectObservers resource
	RunSM@A -> RunReg@A : getSandbox(\n hypertyOwner )

	RunSM@A <- RunReg@A : return\n hypertySandboxListener

	RunSM@A -> BUS@A : addListener(\nDataObjectObserversURL, \nhypertyOwnerSandboxListener )

	note right
		Hyperty owner will be updated when observers
		are added or removed
	end note
end

RunSM@A -> BUS@A : postMsg( Create Msg )

BUS@A ->  : postMsg( Create Msg )

RunSM@A -> RunSM@A : store \nauthorised readers

newpage

opt Invited Hyperties can send provisional responses eg to aknowledge the reception
	...

	BUS@A <-  : postMsg( \nprovisional Response Msg )

	BUS@A -> SP1H@A : postMsg( \nprovisional Response Msg )

end

opt Invited Hyperties can send responses accepting or not to be observer
	...

	BUS@A <-  : postMsg( final \nResponse Msg )

	BUS@A -> SP1H@A : postMsg( \nfinal Response Msg )

	...
end

== Hyperty requests to be Observer of new Data Object ==


BUS@A <-  : postMsg( \nSubscribe Msg )

note right
	create new diagram showing from observer side runtime
	subscription message sent to its local SM
	and how it adds observer listener to objURL/changes
end note

RunSM@A <- BUS@A : postMsg( \nSubscribe Msg )

RunSM@A <- RunSM@A :	check subscriber has been already authorised

opt subscriber has not been already authorised
	RunAuth@A <- RunSM@A : authoriseSubscription(\nSubscribe Message)

	RunAuth@A <- RunAuth@A : apply authz Policies

	RunAuth@A -> BUS@A : postMsg( \nSubscribe Msg )

	BUS@A -> SP1H@A : postMsg( \nSubscribe Msg )

	note right
		Core PDP/PEP requests Hyperty instance
		 to authorise subscription
	end note

end

opt Authorisation policies requires to check data object is registered

	RunSM@A -> RunReg@A : discoverDataObject(\n DataObj URL )

end

RunSM@A -> BUS@A : addListener(\nDataObjURL\changes URL, listener)

note right
	Listeners of new observers are added into message bus,
	 to receive updates about changes in the data object
end note

opt
	RunSM@A -> BUS@A : addListener(\nDataObjectObserversURL, listener)

	RunSM@A -> BUS@A : postMessage(\n Update Message\nfor DataObjectObservers )

	BUS@A -> SP1H@A : postMsg(\n Update Message\nfor DataObjectObservers )

	note right
		the DataObjectObservers resource is updated
		with information about the new Hyperty observer
		thus, if Hyperty owner is listening on this resource
		it will be informed about the new Observer.
	end note

end

RunSM@A -> BUS@A : return authorisation\nResponse Message

BUS@A ->  : postMessage( Authorisation Response Message)

@enduml
