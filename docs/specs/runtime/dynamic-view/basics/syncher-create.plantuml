

@startuml "syncher-create.png"

autonumber

!define SHOW_SP1

!define SHOW_RuntimeA

!define SHOW_CoreRuntimeA
!define SHOW_MsgBUSAtRuntimeA
!define SHOW_RegistryAtRuntimeA
!define SHOW_AuthAtRuntimeA
!define SHOW_SP1SandboxAtRuntimeA
!define SHOW_ServiceProvider1HypertyAtRuntimeA
!define SHOW_LocalObjectAtRuntimeA
!define SHOW_Syncher1AtRuntimeA

!include ../runtime_objects.plantuml

create LocObj@A

SP1H@A ->  LocObj@A : new

SP1H@A -> BUS@A : postMsg(Create MSG)

RunAuth@A <- BUS@A : authorise(Create Message)

RunAuth@A -> RunAuth@A : apply authz Policies

opt Policies for Data Object creation enforce its registration

	RunAuth@A -> RunReg@A : registerDataObject(\n hyperty, readers , descriptor,\n addressAllocationRequired,\nBackendRegistryRequired)

	opt addressAllocationRequired = TRUE
		RunReg@A -> SP1 : allocate address

		note over BUS@A
			Similar to Hyperty registration
		end note
		...

		RunAuth@A <- RunReg@A : return new\n DataObjectURL

		RunAuth@A -> BUS@A : postMsg(\nResponse Msg )

		SP1H@A <- BUS@A : postMsg(\nResponse Msg )

		note right
			Hyperty owner is informed
			 about new DataObject URL
		end note


	end

	opt BackendRegistryRequired = TRUE. Similar to Hyperty registration

		RunReg@A -> SP1 : register data object
		note over BUS@A
			Similar to Hyperty registration
		end note
		...
	end

	RunReg@A -> BUS@A : addListener(\nDataObjectURL\status )

	note right
		Registry requests to receive events about\n
		 the status of the new data object
	end note


end

opt Hyperty owner / reporter is set as listener of DataObjectObservers resource
	RunAuth@A -> RunReg@A : getHypertyListener(\n hypertyOwner )

	RunAuth@A <- RunReg@A : return\n hypertyOwnerListener

	RunAuth@A -> BUS@A : addListener(\nDataObjectObserversURL, \nhypertyOwnerListener, hypertyOwnerUrl)

	note right
		Hyperty onwer will be updated when observers
		are added or removed
	end note
end

RunAuth@A -> BUS@A : authorised( Message + URL )

BUS@A ->  : postMsg( Create Msg )

RunAuth@A -> RunAuth@A : store \nauthorised readers

opt Invited Hyperties can send provisional responses eg to aknowledge the reception
	...

	BUS@A <-  : postMsg( \nprovisional Response Msg )

	BUS@A -> SP1H@A : postMsg( \nprovisional Response Msg )

end

opt Invited Hyperties can send responses accepting or not to be observer
	...

	BUS@A <-  : postMsg( final \nResponse Msg )

	BUS@A -> SP1H@A : postMsg( \nfinal Response Msg )

	...
end

SP1H@A -> Sync1@A : createAsReporter( \nDataObject, resourceURL)

== Hyperty requests to be Observer of new Data Object ==

BUS@A <-  : postMsg( \nSubscribe Msg )

RunAuth@A <- BUS@A : authoriseSubscription(\nSubscribe Message)

RunAuth@A <- RunAuth@A : apply authz Policies

note right
	check subscriber has been already authorised
end note

opt subscriber has not been already authorised
	RunAuth@A -> BUS@A : postMsg( \nSubscribe Msg )

	BUS@A -> SP1H@A : postMsg( \nSubscribe Msg )

	note right
		Core PDP/PEP requests Hyperty instance
		 to authorise subscription
	end note

end

opt Authorisation policies requires to check data object is registered

	RunAuth@A -> RunReg@A : discoverDataObject(\n DataObj URL )

end

RunAuth@A -> BUS@A : addListener(\nDataObj URL, listener, observerUrl)

note right
	Listeners of new observers are added into message bus,
	 to receive updates about changes in the data object
end note

opt
	RunAuth@A -> BUS@A : addListener(\nDataObjectObserversURL, listener, observerUrl)

	RunAuth@A -> BUS@A : postMessage(\n Update Message\nfor DataObjectObservers )

	BUS@A -> SP1H@A : postMsg(\n Update Message\nfor DataObjectObservers )

	note right
		the DataObjectObservers resource is updated
		with information about the new Hyperty observer
		thus, if Hyperty owner is listening on this resource
		it will be informed about the new Observer.
	end note

end

note right
	addListener to be performed by registry or pdp after registry returns pre-authorised hyperties?
	Subscribe should be forwarded to Hyperty Reporter?
end note

RunAuth@A -> BUS@A : return authorisation\nResponse Message

BUS@A ->  : postMessage( Authorisation Response Message)

@enduml
