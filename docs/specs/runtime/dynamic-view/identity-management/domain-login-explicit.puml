
@startuml "domain-login-explicit.png"

autonumber

!define SHOW_RuntimeA

!define SHOW_CoreRuntimeA
!define SHOW_MsgBUSAtRuntimeA
!define SHOW_RegistryAtRuntimeA
!define SHOW_IdentitiesAtRuntimeA
!define SHOW_AuthAtRuntimeA

!define SHOW_SP1SandboxAtRuntimeA
!define SHOW_Protostub1AtRuntimeA
!define SHOW_ServiceProvider1HypertyAtRuntimeA

!define SHOW_SP1

!include ../runtime_objects.plantuml

    BUS@A <- SP1H@A : postMessage(login message)

    BUS@A -> RunAuth@A : authorise(login message)

    RunAuth@A -> RunAuth@A : apply policies

    RunAuth@A -> RunReg@A : getHypertyIdentity(HypertyURL)

    RunAuth@A -> RunID@A : getAccessToken(Identifier, scope)

    RunID@A -> RunID@A : discover valid token

    opt no valid token exists. The process to generate a new token is performed

      note right
        The generation of a new access token is described in D4.1
      end note

    end

    RunAuth@A <- RunID@A : AccessToken returned

    RunAuth@A -> RunAuth@A : add Token to message

    BUS@A <- RunAuth@A : Authorised Message returned

    BUS@A  -> Proto1@A : postMessage\n( connect message with Access Token)

    Proto1@A -> SP1 : connect(Access Token)

    SP1 -> SP1 : validate Access Token

    Proto1@A <- SP1 : Success\nSession Token Granted

    note over Proto1@A
        session token is handled by the protoStub
        or by the Registry / Id Module?
    end note

Proto1@A -> BUS@A : postMessage\n(UPDATE message with ProtoStub.status = connected)

  Proto1@A -> BUS@A : postMessage\n( login message response)

  SP1H@A <- BUS@A : postMessage\n( login message response)


@enduml
