

@startuml "data-object-create.png"

autonumber

!define SHOW_RuntimeA

!define SHOW_CoreRuntimeA
!define SHOW_SMAtRuntimeA
!define SHOW_SP1SandboxAtRuntimeA
!define SHOW_Syncher1AtRuntimeA

!define SHOW_SP1

!define SHOW_Runtime1B

!define SHOW_CoreRuntime1B
!define SHOW_SMAtRuntime1B
!define SHOW_SP1SandboxAtRuntime1B
!define SHOW_ServiceProvider1HypertyAtRuntime1B
!define SHOW_Syncher1AtRuntime1B

!include ../runtime_objects.plantuml

Sync1@A -> RunSM@A : Create MSG

RunSM@A <- RunSM@A : policyEngine.authorise()

  RunSM@A <- RunSM@A : registry.registerDataObject()

group Allocate Data Object URL
  RunSM@A -> SP1 : Create Allocation Message

  note right
   Register Data Object
 	 and its URL is reachable in its domain
 	 (listeners added at event/msg bus)
  end note


  RunSM@A <- SP1 : Create Allocation Response Message
end


Sync1@A <- RunSM@A : Create Response MSG

		note right
			Hyperty owner is informed
			 about new DataObject URL
		end note

RunSM@A -> RunSM@A : bus.addListener\n( SMListener, \n<ObjectURL>/subscription )

note right
	Reporter SM set its listener to receive Object subscription requests from Observers
end note

opt Synch Manager keeps the most updated version of the data object, which will be returned to new Observers

	RunSM@A -> RunSM@A : bus.addListener(\n<ObjectURL>/changes, \nSyncManagerListener )

end

opt Hyperty owner / reporter is updated when object observers are added or removed

	RunSM@A -> RunSM@A : bus.addListener(\n<ObjectURL>/observers, \nhypertyOwnerSandboxListener )

end

==  Hyperties are notified about new object creation ==

RunSM@A -> SP1H@1B : Create Msg

opt Invited Hyperties can send provisional responses eg to aknowledge the reception
	...

  RunSM@A <- SP1H@1B : provisional Response Msg
  Sync1@A <- RunSM@A : provisional Response Msg

end

opt Invited Hyperties can send responses accepting or not to be observer
	...

  RunSM@A <- SP1H@1B : final Response Msg
  Sync1@A <- RunSM@A : final Response Msg

	...
end

@enduml
